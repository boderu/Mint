#!/bin/bash
# Skript um Linux Mint einzurichten. Verlinke und starte dieses Skript in und aus dem Homeverzeichnis!
# Das System sollte bereits die ersten Updates haben und die Verbindung zum Internet muss funktionieren.

function CppCheckInstall
{
	sudo make install MATCHCOMPILER=yes FILESDIR=/usr/share/cppcheck HAVE_RULES=yes \
	CXXFLAGS="-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function"
}


# Funktion: erzeuge symbolische Links mit erweiterter Prüfung
# $1 Quelle:	Datei oder Verzeichnis welches verlinkt werden soll
# $2 Ziel:		der zu erzeugende symbolische Link
function Link
{
	echo
	# Exisitiert das Ziel?
	if [ -e "$2" ]
	then
		# ja, das Ziel existiert
		# ist das Ziel bereits ein symbolischer Link?
		if [ -L "$2" ]
		then
			# ja, das Ziel ist bereits ein symbolischer Link
			echo "$2 ist bereits ein symbolischer Link"

			# zeigt der symbolische Link nicht auf die Quelle?
			if [[ $(readlink "$2") != "$1" ]]
			then
				# ja, der symbolische Link zeigt nicht auf die Quelle
				echo "symbolischer Link $2 zeigt nicht auf die Quelle --> überschreiben"
				# existiert die Quelle?
				if [ -e "$1" ]
				then
					# ja, die Quelle existiert
					rm "$2"					# existierenden Link löschen
					ln -sv "$1" "$2"		# symbolischen Link erzeugen
				else
					# nein, die Quelle existiert nicht
					echo "Die Quelle existiert nicht!"
				fi
			fi
		else
			# nein, das Ziel ist kein symbolischer Link
			# existiert die Quelle?
			if [ -e "$1" ]
			then
				# ja, die Quelle existiert
				echo "$2 ist kein symbolischer Link --> existierende Datei oder Verzeichnis sichern"
				mv -fv "$2" "$2.saved"	# eine existierende Sicherung wird überschrieben
				rm -fRv "$2"			# vorhandene Datei oder Verzeichnis löschen
				ln -sv "$1" "$2"		# symbolischen Link erzeugen
			else
				# nein, die Quelle existiert nicht
				echo "Die Quelle existiert nicht!"
			fi
		fi
	else
		# nein, das Ziel existiert nicht
			# existiert die Quelle?
			if [ -e "$1" ]
			then
				# ja, die Quelle existiert
				rm -fRv "$2"			# vorhandenes Ziel löschen (evtl. fehlerhafter Link)
				ln -sv "$1" "$2"		# symbolischen Link erzeugen
			else
				# nein, die Quelle existiert nicht
				echo "Die Quelle $1 existiert nicht!"
			fi
	fi
} # Link()


cd $HOME

echo "einige Verzeichnisse erzeugen"
mkdir -pv "$HOME/.config"
mkdir -pv "$HOME/.local/share/fonts"
mkdir -pv "$HOME/.local/bin"
mkdir -pv "$HOME/Media/Stable Diffusion"
mkdir -pv "$HOME/Warpinator"
mkdir -pv "$HOME/Frameworks"
mkdir -pv "$HOME/dwhelper"
mkdir -pv "$HOME/WsCCS"
mkdir -pv "$HOME/WsEclipse"
mkdir -pv "$HOME/WsFreeCAD"
mkdir -pv "$HOME/WsKiCAD"
mkdir -pv "$HOME/WsXilinx"
mkdir -pv "$HOME/WsXilinxSDK"


if [[ "$USER" != "guest" ]]
then
	echo "zusätzliche PPAs hinzufügen oder löschen"
	echo ; sudo apt-get install -y --install-recommends ppa-purge 
	echo ; sudo add-apt-repository --yes ppa:libreoffice/ppa
	echo ; sudo add-apt-repository --yes ppa:mozillateam/thunderbird-next
	echo ; sudo add-apt-repository --yes ppa:ubuntuhandbook1/shotwell
	echo ; sudo add-apt-repository --yes ppa:ubuntuhandbook1/darktable
	echo ; sudo add-apt-repository --yes ppa:freecad-maintainers/freecad-stable
	echo ; sudo ppa-purge -y ppa:kicad/kicad-7.0-releases
	echo ; sudo ppa-purge -y ppa:kicad/kicad-8.0-releases
	echo ; sudo add-apt-repository --yes ppa:tomtomtom/yt-dlp
	echo ; sudo add-apt-repository --yes ppa:longsleep/golang-backports
	echo ; sudo add-apt-repository --yes ppa:misery/ppa
	echo ; sudo add-apt-repository --yes ppa:aos1/diff-so-fancy
	echo ; sudo add-apt-repository --yes ppa:widelands-dev/widelands
	echo ; sudo add-apt-repository --yes ppa:nextcloud-devs/client


	echo
	echo "vorhandene Pakete aktualisieren"
	sudo apt update
	sudo apt upgrade -y


	echo
	echo "bereits vorhandene Pakete entfernen"
	sudo apt remove -y rhythmbox
	sudo apt remove -y micro
	sudo apt remove -y exa


	echo
	echo "weitere Pakete installieren"
	echo ; sudo apt install -y --install-recommends nala
	echo ; sudo apt install -y --install-recommends git
	echo ; sudo apt install -y --install-recommends subversion
	echo ; sudo apt install -y --install-recommends unoconv
	echo ; sudo apt install -y --install-recommends catdoc
	echo ; sudo apt install -y --install-recommends docx2txt
	echo ; sudo apt install -y --install-recommends wget
	echo ; sudo apt install -y --install-recommends curl

	echo ; sudo apt install -y --install-recommends rclone
	echo ; sudo apt install -y --install-recommends rclone-browser

	echo ; sudo apt install -y --install-recommends fonts-firacode
	echo ; sudo apt install -y --install-recommends fonts-powerline
	echo ; sudo apt install -y --install-recommends ttf-mscorefonts-installer
	echo ; sudo apt install -y --install-recommends cmatrix
	echo ; sudo apt install -y --install-recommends libreoffice-style-yaru
	echo ; sudo apt install -y --install-recommends libreoffice-style-elementary
	echo ; sudo apt install -y --install-recommends libreoffice-style-elementary
	echo ; sudo apt install -y --install-recommends libreoffice-style-sifr
	echo ; sudo apt install -y --install-recommends libreoffice-style-sukapura
	echo ; sudo apt install -y --install-recommends openclipart
	echo ; sudo apt install -y --install-recommends openclipart-libreoffice


	echo ; sudo apt install -y --install-recommends htop
	echo ; sudo apt install -y --install-recommends inxi
	echo ; sudo apt install -y --install-recommends neofetch
	echo ; sudo apt install -y --install-recommends yad
	echo ; sudo apt install -y --install-recommends sox
	echo ; sudo apt install -y --install-recommends zenity
	echo ; sudo apt install -y --install-recommends ocrmypdf
	echo ; sudo apt install -y --install-recommends gettext
	echo ; sudo apt install -y --install-recommends libsox-fmt-mp3
	echo ; sudo apt install -y --install-recommends mc
	echo ; sudo apt install -y --install-recommends di
	echo ; sudo apt install -y --install-recommends ncdu
	echo ; sudo apt install -y --install-recommends scdaemon
#	echo ; sudo apt install -y --install-recommends micro
	echo ; sudo apt install -y --install-recommends xclip
	echo ; sudo apt install -y --install-recommends bat
	echo ; sudo apt install -y --install-recommends stress
	echo ; sudo apt install -y --install-recommends clamav
#	echo ; sudo apt install -y --install-recommends exa
	echo ; sudo apt install -y --install-recommends glmark2
	echo ; sudo apt install -y --install-recommends hardlink
	echo ; sudo apt install -y --install-recommends rmlint rmlint-doc
	echo ; sudo apt install -y --install-recommends prettyping
	echo ; sudo apt install -y --install-recommends par2
	echo ; sudo apt install -y --install-recommends nmap
	echo ; sudo apt install -y --install-recommends tree
	echo ; sudo apt install -y --install-recommends trash-cli
	echo ; sudo apt install -y --install-recommends btop
	echo ; sudo apt install -y --install-recommends tldr
	echo ; sudo apt install -y --install-recommends highlight
	echo ; sudo apt install -y --install-recommends atool
	echo ; sudo apt install -y --install-recommends caca-utils
	echo ; sudo apt install -y --install-recommends w3m
	echo ; sudo apt install -y --install-recommends poppler-utils
	echo ; sudo apt install -y --install-recommends ranger
	echo ; sudo apt install -y --install-recommends thefuck
	echo ; sudo apt install -y --install-recommends oping
	echo ; sudo apt install -y --install-recommends tmux
	echo ; sudo apt install -y --install-recommends jq
	echo ; sudo apt install -y --install-recommends progress
	echo ; sudo apt install -y --install-recommends zsh
	echo ; sudo apt install -y --install-recommends inetutils-traceroute
	echo ; sudo apt install -y --install-recommends iperf3

	echo ; sudo apt install -y --install-recommends build-essential
	echo ; sudo apt install -y --install-recommends xutils-dev
	echo ; sudo apt install -y --install-recommends gcovr
	echo ; sudo apt install -y --install-recommends attr
	echo ; sudo apt install -y --install-recommends binutils-arm-none-eabi gcc-arm-none-eabi gcc-arm-none-eabi-source
#	echo ; sudo apt install -y --install-recommends libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib
#	echo ; sudo apt install -y --install-recommends picolibc-arm-none-eabi libstdc++-arm-none-eabi-picolibc
	echo ; sudo apt install -y --install-recommends doxygen doxygen-doc doxygen-latex
	echo ; sudo apt install -y --install-recommends graphviz graphviz-doc
	echo ; sudo apt install -y --install-recommends ghostscript
	echo ; sudo apt install -y --install-recommends ruby ri ruby-roo bundler ruby-dev
	echo ; sudo apt install -y --install-recommends asciidoctor asciidoctor-doc
	echo ; sudo apt install -y --install-recommends gnuplot
	echo ; sudo apt install -y --install-recommends wxmaxima
	echo ; sudo apt install -y --install-recommends xmlcopyeditor

	echo ; sudo apt install -y --install-recommends default-jre
	echo ; sudo apt install -y --install-recommends libreadline-dev libpcre3-dev
	echo ; sudo apt install -y --install-recommends yt-dlp rtmpdump ffmpeg ffmpegthumbs aria2
	echo ; sudo apt install -y --install-recommends golang-go
	echo ; sudo apt install -y --install-recommends diff-so-fancy
	echo ; sudo apt install -y --install-recommends rustc cargo

#	echo ; sudo apt install -y --install-recommends freecad
#	echo ; sudo apt install -y --install-recommends ngspice
#	echo ; sudo apt install -y --install-recommends kicad
	echo ; sudo apt install -y --install-recommends brasero
	echo ; sudo apt install -y --install-recommends xtrkcad
	echo ; sudo apt install -y --install-recommends sweep
	echo ; sudo apt install -y --install-recommends gpick
	echo ; sudo apt install -y --install-recommends shotwell
	echo ; sudo apt install -y --install-recommends darktable
	echo ; sudo apt install -y --install-recommends evolution
	echo ; sudo apt install -y --install-recommends gparted
	echo ; sudo apt install -y --install-recommends libreoffice-script-provider-python
	echo ; sudo apt install -y --install-recommends nextcloud-desktop
	echo ; sudo apt install -y --install-recommends nemo-seahorse
	echo ; sudo apt install -y --install-recommends nemo-gtkhash
	echo ; sudo apt install -y --install-recommends nemo-terminal
	echo ; sudo apt install -y --install-recommends nemo-image-converter
	echo ; sudo apt install -y --install-recommends nemo-compare
	echo ; sudo apt install -y --install-recommends nemo-filename-repairer
	echo ; sudo apt install -y --install-recommends nemo-audio-tab
	echo ; sudo apt install -y --install-recommends nemo-nextcloud
	echo ; sudo apt install -y --install-recommends pan
	echo ; sudo apt install -y --install-recommends gnupg2
	echo ; sudo apt install -y --install-recommends fraqtive
	echo ; sudo apt install -y --install-recommends unison
	echo ; sudo apt install -y --install-recommends unison-gtk
	echo ; sudo apt install -y --install-recommends solaar-gnome3
	echo ; sudo apt install -y --install-recommends kdeconnect
	echo ; sudo apt install -y --install-recommends kdeconnect-cli
	echo ; sudo apt install -y --install-recommends searchmonkey
	echo ; sudo apt install -y --install-recommends grsync
	echo ; sudo apt install -y --install-recommends guake

	echo ; sudo apt install -y --install-recommends widelands

	echo ; sudo apt install -y --install-recommends wine
	echo ; sudo apt install -y --install-recommends virtualbox
	echo ; sudo apt install -y --install-recommends firefox-locale-de

	echo ; sudo apt install -y --install-recommends pcscd
	echo ; sudo apt install -y --install-recommends libccid
	echo ; sudo apt install -y --install-recommends ausweisapp2

	echo
	echo "zusätzliche Rust (Cargo) Pakete"
	cargo install du-dust
	cargo install exa


	echo
	echo "zusätzliche Ruby Pakete"
	echo ; sudo gem install asciidoctor-diagram
	echo ; sudo gem install roo

	echo
	echo "Python und zusätzliche Pakete"
	echo ; sudo apt install -y --install-recommends python3
	echo ; sudo apt install -y --install-recommends python3-pip
	echo ; sudo apt install -y --install-recommends python3-gpg
	echo ; sudo apt install -y --install-recommends python3-venv
	echo ; sudo apt install -y --install-recommends python3-brotli
	echo ; sudo apt install -y --install-recommends python3-urllib3
	echo ; sudo apt install -y --install-recommends libgtk-3-dev
	echo ; sudo apt install -y --install-recommends libgstreamer-gl1.0-0
	echo ; sudo apt install -y --install-recommends freeglut3
	echo ; sudo apt install -y --install-recommends freeglut3-dev
	echo ; sudo apt install -y --install-recommends python3-gst-1.0
	echo ; sudo apt install -y --install-recommends libglib2.0-dev
	echo ; sudo apt install -y --install-recommends ubuntu-restricted-extras
	echo ; sudo apt install -y --install-recommends libgstreamer-plugins-base1.0-dev
	echo ; sudo apt install -y --install-recommends wxglade
	echo ; sudo apt install -y --install-recommends python3-tk
	echo ; sudo apt install -y --install-recommends python3-setuptools
	echo ; sudo apt install -y --install-recommends python3-dev

	echo
	echo "Flatpaks installieren/deinstallieren"
	echo ; sudo flatpak update -y --noninteractive

	echo ; sudo flatpak install -y --noninteractive com.github.tchx84.Flatseal
	echo ; sudo flatpak install -y --noninteractive io.github.flattool.Warehouse
	echo ; sudo flatpak install -y --noninteractive io.github.giantpinkrobots.flatsweep
	echo ; sudo flatpak install -y --noninteractive net.displaycal.DisplayCAL
	echo ; sudo flatpak uninstall -y --noninteractive org.winehq.Wine
	echo ; sudo flatpak install -y --noninteractive ca.desrt.dconf-editor

	echo ; sudo flatpak install -y --noninteractive org.stellarium.Stellarium
	echo ; sudo flatpak install -y --noninteractive org.gnome.Maps

	echo ; sudo flatpak install -y --noninteractive com.bitwarden.desktop
	echo ; sudo flatpak install -y --noninteractive net.cozic.joplin_desktop
	echo ; sudo flatpak uninstall -y --noninteractive com.nextcloud.desktopclient.nextcloud
	echo ; sudo flatpak install -y --noninteractive com.synology.SynologyDrive
	echo ; sudo flatpak install -y --noninteractive org.signal.Signal
	echo ; sudo flatpak install -y --noninteractive us.zoom.Zoom
	echo ; sudo flatpak install -y --noninteractive com.skype.Client

	echo ; sudo flatpak uninstall -y --noninteractive com.visualstudio.code
	echo ; sudo flatpak install -y --noninteractive com.jetbrains.PyCharm-Community
	echo ; sudo flatpak uninstall -y --noninteractive com.jgraph.drawio.desktop
	echo ; sudo flatpak install -y --noninteractive org.scilab.Scilab
	echo ; sudo flatpak install -y --noninteractive org.octave.Octave
	echo ; sudo flatpak install -y --noninteractive org.gaphor.Gaphor
	echo ; sudo flatpak install -y --noninteractive org.wireshark.Wireshark
	echo ; sudo flatpak uninstall -y --noninteractive com.github.marktext.marktext
	echo ; sudo flatpak install -y --noninteractive me.mitya57.ReText
	echo ; sudo flatpak install -y --noninteractive com.github.afrantzis.Bless
	echo ; sudo flatpak install -y --noninteractive org.wxhexeditor.wxHexEditor
	echo ; sudo flatpak install -y --noninteractive org.sqlitebrowser.sqlitebrowser
	echo ; sudo flatpak install -y --noninteractive org.gnome.meld
	echo ; sudo flatpak install -y --noninteractive cc.arduino.arduinoide
	echo ; sudo flatpak uninstall -y --noninteractive com.github.fabiocolacio.marker
	echo ; sudo flatpak install -y --noninteractive org.kde.labplot2
	echo ; sudo flatpak install -y --noninteractive org.kicad.KiCad
	echo ; sudo flatpak install -y --noninteractive pl.youkai.nscan

	echo ; sudo flatpak install -y --noninteractive com.prusa3d.PrusaSlicer
	echo ; sudo flatpak install -y --noninteractive org.freecadweb.FreeCAD

	echo ; sudo flatpak install -y --noninteractive org.freefilesync.FreeFileSync
	echo ; sudo flatpak install -y --noninteractive com.github.qarmin.czkawka
	echo ; sudo flatpak uninstall -y --noninteractive com.hamrick.VueScan
	echo ; sudo flatpak uninstall -y --noninteractive org.mozilla.Thunderbird
	echo ; sudo flatpak uninstall -y --noninteractive eu.betterbird.Betterbird
	echo ; sudo flatpak uninstall -y --noninteractive com.ulduzsoft.Birdtray
	echo ; sudo flatpak uninstall -y --noninteractive org.gnome.Evolution
	echo ; sudo flatpak install -y --noninteractive org.gnome.Contacts
	echo ; sudo flatpak install -y --noninteractive org.gnucash.GnuCash
	echo ; sudo flatpak install -y --noninteractive com.calibre_ebook.calibre
	echo ; sudo flatpak install -y --noninteractive com.github.jeromerobert.pdfarranger
	echo ; sudo flatpak install -y --noninteractive com.github.junrrein.PDFSlicer
	echo ; sudo flatpak install -y --noninteractive org.gramps_project.Gramps
	echo ; sudo flatpak install -y --noninteractive net.scribus.Scribus
	echo ; sudo flatpak install -y --noninteractive org.filezillaproject.Filezilla
	echo ; sudo flatpak install -y --noninteractive org.gnome.moserial
	echo ; sudo flatpak install -y --noninteractive io.dbeaver.DBeaverCommunity
	echo ; sudo flatpak install -y --noninteractive org.raspberrypi.rpi-imager
	echo ; sudo flatpak install -y --noninteractive io.gitlab.adhami3310.Impression
	echo ; sudo flatpak uninstall -y --noninteractive de.bund.ausweisapp.ausweisapp2
	echo ; sudo flatpak install -y --noninteractive org.flameshot.Flameshot
	echo ; sudo flatpak install -y --noninteractive info.portfolio_performance.PortfolioPerformance
	echo ; sudo flatpak install -y --noninteractive uk.org.zint.zint-qt

	echo ; sudo flatpak install -y --noninteractive org.gimp.GIMP
	echo ; sudo flatpak install -y --noninteractive net.sourceforge.Hugin
	echo ; sudo flatpak install -y --noninteractive org.inkscape.Inkscape
	echo ; sudo flatpak install -y --noninteractive com.rawtherapee.RawTherapee
	echo ; sudo flatpak install -y --noninteractive org.darktable.Darktable
	echo ; sudo flatpak install -y --noninteractive org.blender.Blender
	echo ; sudo flatpak install -y --noninteractive org.blender.Blender.Codecs
	echo ; sudo flatpak install -y --noninteractive org.gnome.eog
	echo ; sudo flatpak install -y --noninteractive com.interversehq.qView
	echo ; sudo flatpak install -y --noninteractive com.github.buddhi1980.mandelbulber2
	echo ; sudo flatpak install -y --noninteractive com.github.tenderowl.frog
	echo ; sudo flatpak install -y --noninteractive io.github.ktgw0316.LightZone
	echo ; sudo flatpak install -y --noninteractive io.github.maurycyliebner.enve
	echo ; sudo flatpak install -y --noninteractive fr.romainvigier.MetadataCleaner
	echo ; sudo flatpak install -y --noninteractive io.github.najepaliya.kleaner

	echo ; sudo flatpak install -y --noninteractive com.makemkv.MakeMKV
	echo ; sudo flatpak install -y --noninteractive com.obsproject.Studio
	echo ; sudo flatpak install -y --noninteractive fr.handbrake.ghb
	echo ; sudo flatpak install -y --noninteractive org.shotcut.Shotcut
	echo ; sudo flatpak install -y --noninteractive tv.plex.PlexDesktop
	echo ; sudo flatpak install -y --noninteractive io.mpv.Mpv
	echo ; sudo flatpak install -y --noninteractive org.gnome.Totem
	echo ; sudo flatpak install -y --noninteractive org.videolan.VLC
	echo ; sudo flatpak install -y --noninteractive org.gnome.Cheese
	echo ; sudo flatpak install -y --noninteractive com.ozmartians.VidCutter
	echo ; sudo flatpak install -y --noninteractive net.mediaarea.MediaInfo
	echo ; sudo flatpak install -y --noninteractive io.freetubeapp.FreeTube
	echo ; sudo flatpak install -y --noninteractive org.gnome.World.PikaBackup
	echo ; sudo flatpak install -y --noninteractive io.gitlab.adhami3310.Footage
	echo ; sudo flatpak install -y --noninteractive tv.kodi.Kodi

	echo ; sudo flatpak install -y --noninteractive com.spotify.Client
	echo ; sudo flatpak install -y --noninteractive de.haeckerfelix.Shortwave
	echo ; sudo flatpak install -y --noninteractive org.audacityteam.Audacity
	echo ; sudo flatpak install -y --noninteractive org.audacityteam.Audacity.Codecs
	echo ; sudo flatpak install -y --noninteractive org.clementine_player.Clementine
	echo ; sudo flatpak install -y --noninteractive org.gnome.Rhythmbox3
	echo ; sudo flatpak install -y --noninteractive org.gnome.SoundJuicer
	echo ; sudo flatpak install -y --noninteractive org.gnome.EasyTAG
	echo ; sudo flatpak install -y --noninteractive org.ardour.Ardour

	echo ; sudo flatpak install -y --noninteractive org.gnome.Mahjongg
	echo ; sudo flatpak install -y --noninteractive net.sourceforge.lgames.LBreakoutHD
	echo ; sudo flatpak install -y --noninteractive org.frozen_bubble.frozen-bubble
	echo ; sudo flatpak install -y --noninteractive org.gnome.Aisleriot
	echo ; sudo flatpak install -y --noninteractive org.gnome.Klotski
	echo ; sudo flatpak install -y --noninteractive org.gnome.Mahjongg
	echo ; sudo flatpak install -y --noninteractive org.gnome.Mines
	echo ; sudo flatpak install -y --noninteractive org.sauerbraten.Sauerbraten
	echo ; sudo flatpak install -y --noninteractive org.seul.pingus
	echo ; sudo flatpak install -y --noninteractive org.hedgewars.Hedgewars
	echo ; sudo flatpak install -y --noninteractive org.gnome.Sudoku


	echo
	echo "Install Nerd Fonts"
	if [ ! -d "$HOME/.local/share/fonts/NerdFonts" ]
	then
		git clone https://github.com/ryanoasis/nerd-fonts.git
		cd nerd-fonts
		./install.sh
		cd ..
		sudo rm -R --force nerd-fonts
	fi


	echo
	echo "Install micro"
	git clone https://github.com/zyedidia/micro
	cd micro
	make build
	sudo mv micro /usr/bin/
	cd ..
	sudo rm -R --force micro


	echo
	echo "Install LazyGit"
	LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
	curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
	tar xf lazygit.tar.gz lazygit
	sudo install lazygit /usr/local/bin
	sudo rm -f lazygit.tar.gz
	sudo rm -f lazygit


	echo
	echo "xplr Dateimanager"
#	git clone https://github.com/sayanarijit/xplr.git
#	cd xplr
#	cargo build --locked --release --bin xplr
#	sudo cp target/release/xplr /usr/local/bin/
#	cd ..
#	sudo rm -Rf xplr

	PLATFORM="linux"  # or "macos" / "linux-musl"
	wget https://github.com/sayanarijit/xplr/releases/latest/download/xplr-${PLATFORM}.tar.gz
	tar xzvf xplr-${PLATFORM}.tar.gz
	sudo mv --force xplr /usr/local/bin/
	rm --force xplr-${PLATFORM}.tar.gz


	echo
	echo "CppCheck aktualisieren"
	sudo apt-get install -y libpcre3-dev
	git clone https://github.com/danmar/cppcheck.git
	cd cppcheck

	# gibt es eine Versionsinformation von einer vorhergehenden Installation?
	if [ -f "$HOME/.cppcheck_version" ]
	then
		# ja, CppCheck wurde schon einmal installiert
		# hat sich die Version des Repository geändert?
		if [[ $(cat "$HOME/.cppcheck_version") != $(git log --pretty="%H" -n 1) ]]
		then
			# ja, die Versionen sind unterschiedlich --> aktuelle Version merken und CppCheck installieren
			echo "neue CppCheck-Version vorhanden --> Update"
			git log --pretty="%H" -n 1 > "$HOME/.cppcheck_version"
			CppCheckInstall
		else
			echo "CppCheck-Versionen identisch --> keine Installation"
		fi
	else
		# nein, CppCheck wurde noch nicht installiert
		echo "installierte CppCheck-Version nicht vorhanden --> neue Installation"
		git log --pretty="%H" -n 1 > "$HOME/.cppcheck_version"
		CppCheckInstall
	fi
	cd ..
	sudo rm -Rf cppcheck
	echo "CppCeck Version: $(cppcheck --version)"


	echo
	echo "zusätzliche Pakete für TI Code Composer Studio 12"
	sudo apt install -y --install-recommends libc6-i386 libusb-0.1-4 libgconf-2-4 libncurses5 libpython2.7 libtinfo5


	echo
	echo "Visual Studio Code"
	sudo apt install -y --install-recommends dirmngr software-properties-common apt-transport-https curl
	if [ ! -e "/usr/share/keyrings/vscode.gpg" ]
	then
		curl -fSsL https://packages.microsoft.com/keys/microsoft.asc | \
			sudo gpg --dearmor | sudo tee /usr/share/keyrings/vscode.gpg > /dev/null
	fi
	if [ ! -e "/etc/apt/sources.list.d/vscode.list" ]
	then
		echo deb [arch=amd64 signed-by=/usr/share/keyrings/vscode.gpg] \
			https://packages.microsoft.com/repos/vscode stable main | \
			sudo tee /etc/apt/sources.list.d/vscode.list
		sudo apt update
	fi
	sudo apt install -y --install-recommends code


	echo
	echo "Easy Diffusion installieren"
	if [ ! -d "$HOME/easy-diffusion" ]
	then
		wget "https://github.com/cmdr2/stable-diffusion-ui/releases/latest/download/Easy-Diffusion-Linux.zip"
		unzip Easy-Diffusion-Linux.zip
		rm -f Easy-Diffusion-Linux.zip
	fi


	#echo
	#echo "Install Automatic 1111"
	#sudo apt install -y --install-recommends libgl1 libglib2.0-0
	#wget -q https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui/master/webui.sh
	#chmod +x webui.sh
	#./webui.sh
	#rm -fv webui.sh


	echo
	echo "DrawIO installieren"
	curl -s https://api.github.com/repos/jgraph/drawio-desktop/releases/latest | \
		grep browser_download_url | \
		grep '\.deb' | \
		cut -d '"' -f 4 | \
		wget -i -
	sudo apt -f install ./drawio-amd64*.deb
	rm -fv ./drawio*.deb


	echo
	echo "Frontplattendesigner installieren"
	curl -s https://www.schaeffer-ag.de/frontplatten-designer#download | \
		grep -E -o 'https[^[:blank:]]*-amd64\.deb' | \
		sort -V | \
		tail --lines=1 | \
		wget -i -
	sudo apt -f install ./FrontDesign*amd64.deb
	rm -fv ./FrontDesign*amd64.deb


	echo
	echo "nicht mehr benötigte Pakete entfernen"
	sudo apt autoremove -y


	echo
	echo "User Guest einrichten"
	egrep -i guest /etc/passwd >/dev/null
	if [ $? -ne 0 ]
	then
		sudo adduser --disabled-password --gecos "Guest" guest
		sudo adduser guest users
		sudo passwd -d guest
	fi

	echo
	echo "User zur Gruppe users hinzufügen"
	sudo adduser $USER users

	echo
	echo "Gemeinsamen Ordner für alle Nutzer zum Teilen von Dateien konfigurieren"
	if [ -d /home/Share ]
	then
		echo "Ordner Share existiert bereits"
	else
		sudo mkdir /home/Share
		sudo chown root:users /home/Share
		sudo chmod ugo+rwX /home/Share
		sudo chmod g+s /home/Share
	fi

	sudo rm -f /home/Share/mint
	sudo cp $HOME/Mint/bin/mint /home/Share/

	echo
	echo "Öffentlichen (RO) Ordner für alle Nutzer konfigurieren"
	if [ -d /home/Public ]
	then
		echo "Ordner Public existiert bereits"
	else
		sudo mkdir /home/Public
		sudo chown $USER:users /home/Public
		sudo chmod ugo+rX /home/Public
		sudo chmod u+w /home/Public
		sudo chmod ug+s /home/Public
	fi

	echo
	echo "Limit für Filesystem-Watches (inotify) erhöhen"
	if [ ! -e /etc/sysctl.d/90-inotify.conf ]
	then
		sudo cp $HOME/Mint/Sytem/etc/sysctl.d/90-inotify.conf /etc/sysctl.d/
		sudo chown root:root /etc/sysctl.d/90-inotify.conf
		sudo sysctl -p --system
	fi

fi # if $USER != guest


echo
echo "zusätzliche Python Bibliotheken"
pip install GitPython
pip install pypubsub
pip install pyinstaller
pip install pypubsub
pip install subpub
pip install sqlalchemy
pip install ObjectListView
pip install lxml
pip install python-can
pip install canopen
pip install python-pptx
pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-22.04 wxPython
#pip3 install -v --user wxPython


echo
echo "lokale Konfigurationen einrichten"
if [ -d "Mint" ]
then
	cd Mint
	git fetch --all
	git pull
	cd ..
else
	git clone https://github.com/boderu/Mint.git
fi

if [ -d ".oh-my-zsh" ]
then
	cd .oh-my-zsh
	git fetch --all
	git pull
	cd ..
else
	git clone https://github.com/ohmyzsh/ohmyzsh.git .oh-my-zsh
fi


echo
echo "Frameworks auschecken oder aktualisieren"

if [ -d "$HOME/Frameworks/KiCAD" ]
then
	pushd "$HOME/Frameworks/KiCAD"
	git fetch --all
	git pull
	popd
else
	pushd "$HOME/Frameworks"
	git clone https://github.com/boderu/Framework.KiCAD.git KiCAD
	popd
fi


echo
echo "FireFox Download Helper App"
if [ -f "$HOME/Nextcloud/Apps/Mint/DownloadHelper/vdhcoapp-2.0.10-linux-x86_64.deb" ]
then
	sudo apt install -y $HOME/Nextcloud/Apps/Mint/DownloadHelper/vdhcoapp-2.0.10-linux-x86_64.deb
	/opt/vdhcoapp/vdhcoapp install
fi

echo "VueScan"
if [ -f "$HOME/Nextcloud/Apps/Mint/VueScan/vue*.deb" ]
then
	sudo apt install -y $HOME/Nextcloud/Apps/Mint/VueScan/vue*.deb
fi

echo
echo "Segger j-link"
if [ -f "$HOME/Nextcloud/Apps/Mint/Segger/JLink_Linux_V794f_x86_64.deb" ]
then
	sudo apt purge -y jlink
	sudo apt install -y $HOME/Nextcloud/Apps/Mint/Segger/JLink_Linux_V794f_x86_64.deb
fi

echo
echo "Segger Ozone Debugger"
if [ -f "$HOME/Nextcloud/Apps/Mint/Segger/Ozone_Linux_V330d_x86_64.deb" ]
then
	sudo apt install -y $HOME/Nextcloud/Apps/Mint/Segger/Ozone_Linux_V330d_x86_64.deb
fi


Link "$HOME/Mint/.bashrc"									"$HOME/.bashrc"
Link "$HOME/Mint/.bash_logout"								"$HOME/.bash_logout"
Link "$HOME/Mint/.bash_aliases"								"$HOME/.bash_aliases"
Link "$HOME/Mint/.profile"									"$HOME/.profile"
Link "$HOME/Mint/.zshrc"									"$HOME/.zshrc"
Link "$HOME/Mint/.selected_editor"							"$HOME/.selected_editor"
Link "$HOME/Mint/bin"										"$HOME/bin"
Link "$HOME/Mint/.ne"										"$HOME/.ne"
Link "$HOME/Mint/.config/broot"								"$HOME/.config/broot"
Link "$HOME/Mint/.config/btop"								"$HOME/.config/btop"
Link "$HOME/Mint/.config/darktable"							"$HOME/.config/darktable"
Link "$HOME/Mint/.config/htop"								"$HOME/.config/htop"
Link "$HOME/Mint/.config/kicad"								"$HOME/.config/kicad"
Link "$HOME/Mint/.config/lazygit"							"$HOME/.config/lazygit"
Link "$HOME/Mint/.config/micro"								"$HOME/.config/micro"
Link "$HOME/Mint/.config/vlc"								"$HOME/.config/vlc"
Link "$HOME/Mint/.local/share/nemo"							"$HOME/.local/share/nemo"
Link "$HOME/Mint/.local/share/broot"						"$HOME/.local/share/broot"
Link "$HOME/Mint/.vuescan"									"$HOME/.vuescan"
Link "$HOME/Mint/Templates"									"$HOME/Vorlagen"

Link "$HOME/SynologyDrive/Mint/.vuescanrc"					"$HOME/.vuescanrc"
Link "$HOME/SynologyDrive/Mint/.ssh"						"$HOME/.ssh"
Link "$HOME/SynologyDrive/Mint/.gitconfig"					"$HOME/.gitconfig"
Link "$HOME/SynologyDrive/Mint/.git-credentials"			"$HOME/.git-credentials"
Link "$HOME/SynologyDrive/Mint/.local/share/kicad"			"$HOME/.local/share/kicad"
Link "$HOME/SynologyDrive/Mint/.local/share/rhythmbox"		"$HOME/.local/share/rhythmbox"
Link "$HOME/SynologyDrive/Mint/.local/share/strawberry"		"$HOME/.local/share/strawberry"
Link "$HOME/SynologyDrive/Mint/.local/share/gnome-mines"	"$HOME/.local/share/gnome-mines"
Link "$HOME/SynologyDrive/Mint/.local/share/widelands"		"$HOME/.local/share/widelands"

Link 	"$HOME/SynologyDrive/Mint/.local/bin/avr8-gnu-toolchain-linux_x86_64"	\
		"$HOME/.local/bin/avr8-gnu-toolchain-linux_x86_64"
#Link "$HOME/SynologyDrive/Mint/.config/darktable"			"$HOME/.config/darktable"

Link "$HOME/SynologyDrive/Bilder"							"$HOME/Bilder"
Link "$HOME/SynologyDrive/Dokumente"						"$HOME/Dokumente"
Link "$HOME/SynologyDrive/Downloads"						"$HOME/Downloads"
Link "$HOME/SynologyDrive/Calibre-Bibliothek"				"$HOME/Calibre-Bibliothek"
Link "$HOME/SynologyDrive/Musik"							"$HOME/Musik"


echo
echo "zusätzliche Mint Applets installieren:"
pushd "$HOME/.local/share/cinnamon/applets/"
if [ ! -d "weather@mockturtl" ]
then
	echo "weather@mockturtl"
	wget https://cinnamon-spices.linuxmint.com/files/applets/weather@mockturtl.zip && \
	unzip weather@mockturtl.zip
	rm -f weather@mockturtl.zip
else
	echo "weather@mockturtl already exists"
fi

if [ ! -d "cinnamon-timer@jake1164" ]
then
	echo "cinnamon-timer@jake1164"
	wget https://cinnamon-spices.linuxmint.com/files/applets/cinnamon-timer@jake1164.zip && \
	unzip cinnamon-timer@jake1164.zip
	rm -f cinnamon-timer@jake1164.zip
else
	echo "cinnamon-timer@jake1164 already exists"
fi

if [ ! -d "turn-off-monitor@zablotski" ]
then
	echo "turn-off-monitor@zablotski"
	wget https://cinnamon-spices.linuxmint.com/files/applets/turn-off-monitor@zablotski.zip && \
	unzip turn-off-monitor@zablotski.zip
	rm -f turn-off-monitor@zablotski.zip
else
	echo "turn-off-monitor@zablotski already exists"
fi
popd


# Apps und Desktop konfigurieren
# gibt es eine abweichende Font-Skalierung?
if [ -f $HOME/.text-scaling-factor ]
then
	echo "eine abweichende Font-Skalierung von $(cat $HOME/.text-scaling-factor) einrichten"
	cat $HOME/Mint/org.cinnamon.dconf | \
		sed "s/text-scaling-factor=.*/text-scaling-factor=$(cat $HOME/.text-scaling-factor)/" | \
		dconf load /org/cinnamon/
else
	dconf load /org/cinnamon/ < $HOME/Mint/org.cinnamon.dconf
fi

dconf load /org/nemo/						< $HOME/Mint/org.nemo.dconf
dconf load /org/x/editor/					< $HOME/Mint/org.x.editor.dconf
dconf load /org/x/pix/						< $HOME/Mint/org.x.pix.dconf
dconf load /org/x/reader/					< $HOME/Mint/org.x.reader.dconf
dconf load /org/gnome/calculator/			< $HOME/Mint/org.gnome.calculator.dconf
dconf load /org/gnome/terminal/				< $HOME/Mint/org.gnome.terminal.dconf
dconf load /org/gnome/desktop/interface/	< $HOME/Mint/org.gnome.desktop.interface.dconf

echo
echo "broot installieren"
#sudo apt install build-essential libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev -y
#git clone https://github.com/Canop/broot.git
#cd broot
#cargo install --locked --features clipboard --path .
#cd ..
#rm -Rf broot
curl -o broot -L https://dystroy.org/broot/download/x86_64-linux/broot
sudo mv -f broot /usr/local/bin
sudo chmod +x /usr/local/bin/broot


echo
echo "kopiere Mozilla Einstellungen:"
if [ ! -d "$HOME/.mozilla" ]
then
	if [ -d "$HOME/SynologyDrive/Mint/.mozilla" ]
	then
		cp -frv "$HOME/SynologyDrive/Mint/.mozilla" "$HOME/"
	fi
fi

echo
echo "zusätzliche Firefox Einstellungen:"
echo "1) Erzeuge alle Firefox-Profile (about:profiles)"
echo "2) Synchronisiere alle Profile (verschiedene Logins notwendig)"
echo "3) Nach der Synchronisierung: don't allow Firefox to send data"
echo "4) Ändere die Toolbar, ..."
echo "5) Ändere die internen Firefox-Einstellungen (about:config)"
echo "   browser.uidensity --> 1"
echo "   signon.includeOtherSubdomainsInLookup --> false"
#read -p "drücke Enter ..."

echo
echo "Einrichtung beendet."
echo

# EOF
