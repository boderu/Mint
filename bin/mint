#!/bin/bash
# Skript um Linux Mint einzurichten. Verlinke und starte dieses Skript in und aus dem Homeverzeichnis!
# Das System sollte bereits die ersten Updates haben und die Verbindung zum Internet muss funktionieren.

# Funktion: erzeuge symbolische Links mit erweiterter Prüfung
# $1 Quelle:	Datei oder Verzeichnis welches verlinkt werden soll
# $2 Ziel:		der zu erzeugende symbolische Link
function Link
{
	echo
	# Exisitiert das Ziel?
	if [ -e "$2" ]
	then
		# ja, das Ziel existiert
		# ist das Ziel bereits ein symbolischer Link?
		if [ -L "$2" ]
		then
			# ja, das Ziel ist bereits ein symbolischer Link
			echo "$2 ist bereits ein symbolischer Link"

			# zeigt der symbolische Link nicht auf die Quelle?
			if [[ $(readlink "$2") != "$1" ]]
			then
				# ja, der symbolische Link zeigt nicht auf die Quelle
				echo "symbolischer Link $2 zeigt nicht auf die Quelle --> überschreiben"
				# existiert die Quelle?
				if [ -e "$1" ]
				then
					# ja, die Quelle existiert
					rm "$2"					# existierenden Link löschen
					ln -sv "$1" "$2"		# symbolischen Link erzeugen
				else
					# nein, die Quelle existiert nicht
					echo "Die Quelle existiert nicht!"
				fi
			fi
		else
			# nein, das Ziel ist kein symbolischer Link
			# existiert die Quelle?
			if [ -e "$1" ]
			then
				# ja, die Quelle existiert
				echo "$2 ist kein symbolischer Link --> existierende Datei oder Verzeichnis sichern"
				mv -fv "$2" "$2.saved"	# eine existierende Sicherung wird überschrieben
				rm -fRv "$2"			# vorhandene Datei oder Verzeichnis löschen
				ln -sv "$1" "$2"		# symbolischen Link erzeugen
			else
				# nein, die Quelle existiert nicht
				echo "Die Quelle existiert nicht!"
			fi
		fi
	else
		# nein, das Ziel existiert nicht
			# existiert die Quelle?
			if [ -e "$1" ]
			then
				# ja, die Quelle existiert
				rm -fRv "$2"			# vorhandenes Ziel löschen (evtl. fehlerhafter Link)
				ln -sv "$1" "$2"		# symbolischen Link erzeugen
			else
				# nein, die Quelle existiert nicht
				echo "Die Quelle $1 existiert nicht!"
			fi
	fi
} # Link()


cd $HOME

echo "Create some directories"
mkdir -pv "$HOME/.config"
mkdir -pv "$HOME/.config/nemo"
mkdir -pv "$HOME/.local/share/fonts"
mkdir -pv "$HOME/.local/bin"
mkdir -pv "$HOME/Media/Stable Diffusion"
mkdir -pv "$HOME/Warpinator"
mkdir -pv "$HOME/Frameworks"
mkdir -pv "$HOME/dwhelper"
mkdir -pv "$HOME/WsCCS"
mkdir -pv "$HOME/WsEclipse"
mkdir -pv "$HOME/WsFreeCAD"
mkdir -pv "$HOME/WsKiCAD"
mkdir -pv "$HOME/WsXilinx"
mkdir -pv "$HOME/WsXilinxSDK"

touch "$HOME/.sudo_as_admin_successful"

if [[ "$USER" != "guest" ]]
then
	sudo chown -Rv _apt:root /var/cache/apt/archives/partial/
	sudo chmod -Rv 700 /var/cache/apt/archives/partial/

	#===================================================================================================================
	echo "Add or delete additional PPAs"
	echo ; sudo apt-get install -y --install-recommends ppa-purge 
	echo ; sudo add-apt-repository --yes ppa:libreoffice/ppa
#	echo ; sudo add-apt-repository --yes ppa:mozillateam/thunderbird-next
#	echo ; sudo add-apt-repository --yes ppa:ubuntuhandbook1/shotwell
#	echo ; sudo add-apt-repository --yes ppa:ubuntuhandbook1/darktable
#	echo ; sudo add-apt-repository --yes ppa:freecad-maintainers/freecad-stable
#	echo ; sudo add-apt-repository --yes ppa:tomtomtom/yt-dlp
#	echo ; sudo add-apt-repository --yes ppa:longsleep/golang-backports
	echo ; sudo add-apt-repository --yes ppa:misery/ppa								# Ausweis App
	echo ; sudo add-apt-repository --yes ppa:aos1/diff-so-fancy
#	echo ; sudo add-apt-repository --yes ppa:widelands-dev/widelands
#	echo ; sudo add-apt-repository --yes ppa:nextcloud-devs/client
#	echo ; sudo ppa-purge -y ppa:kicad/kicad-7.0-releases
#	echo ; sudo ppa-purge -y ppa:kicad/kicad-8.0-releases


	echo ; echo "Update existing Debian packages"
	sudo apt update
	sudo apt upgrade -y

	echo ; echo "Remove Debian packages"
	if [ -e "$HOME/Mint/deb-remove.conf" ]
	then
		cat "$HOME/Mint/deb-remove.conf" | grep -v '^#' | grep -v '^$' | \
		while read LINE
		do
			sudo apt remove -y $LINE
			echo
		done
	fi

	echo ; echo "Remove packages that are no longer required"
	sudo apt autoremove -y


	echo ; echo "Install Debian packages"
	if [ -e "$HOME/Mint/deb-install.conf" ]
	then
		cat "$HOME/Mint/deb-install.conf" | grep -v '^#' | grep -v '^$' | \
		while read LINE
		do
			sudo apt install -y --install-recommends $LINE
			echo
		done
	fi


	#===================================================================================================================
	echo ; echo "Current Rust and additional (cargo) packages"
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
	sed -i '/^\. "\$HOME\/.cargo\/env"/d' $HOME/Mint/.bashrc
	sed -i '/^\. "\$HOME\/.cargo\/env"/d' $HOME/Mint/.profile
	cargo install du-dust
	cargo install exa
	cargo install eza
	cargo install git-graph


	#===================================================================================================================
	echo ; echo "Additional Ruby packages"
	echo ; sudo gem install asciidoctor-diagram
	echo ; sudo gem install roo


	#===================================================================================================================
	echo ; echo "Install and remove Flatpaks"

	echo ; sudo flatpak update -y --noninteractive

	if [ -e "$HOME/Mint/flatpak-remove.conf" ]
	then
		cat "$HOME/Mint/flatpak-remove.conf" | grep -v '^#' | grep -v '^$' | \
		while read LINE
		do
			if [ 0 -ne $(flatpak list | grep $LINE | wc --lines) ]
			then
				echo "Remove Flatpak $LINE"
				sudo flatpak uninstall -y --noninteractive $LINE
			else
				echo "Flatpak $LINE already removed"
			fi
		done
	fi

	if [ -e "$HOME/Mint/flatpak-install.conf" ]
	then
		cat "$HOME/Mint/flatpak-install.conf" | grep -v '^#' | grep -v '^$' | \
		while read LINE
		do
			if [ 0 -eq $(flatpak list | grep $LINE | wc --lines) ]
			then
				echo "Install Flatpak $LINE"
				sudo flatpak install -y --noninteractive $LINE
			else
				echo "Flatpak $LINE already installed"
			fi
		done
	fi


	#===================================================================================================================
	install_nerd
	install_micro
	install_lazygit
	install_xplr
	install_cppcheck
	install_drawio
	install_frontdesign
	install_vuescan
	install_segger
	install_vscode
	install_sysworxx
	install_diffusion
	install_ccs


	#===================================================================================================================
	echo ; echo "arm-none-eabi-gdb"
	if [ ! -e "/usr/bin/arm-none-eabi-gdb" ]
	then
		if [ -e "/usr/bin/gdb-multiarch" ]
		then
			sudo ln --verbose -s /usr/bin/gdb-multiarch /usr/bin/arm-none-eabi-gdb
		fi
	fi


	#===================================================================================================================
	echo ; echo "Remove packages that are no longer required"
	sudo apt autoremove -y


	#===================================================================================================================
	echo ; echo "Set up User Guest"
	egrep -i guest /etc/passwd >/dev/null
	if [ $? -ne 0 ]
	then
		sudo adduser --disabled-password --gecos "Guest" guest
		sudo adduser guest users
		sudo passwd -d guest
	fi

	echo ; echo "Add users to the users group"
	sudo adduser $USER users


	#===================================================================================================================
	echo ; echo "Configure shared folder for all users to share files"
	if [ -d /home/Share ]
	then
		echo "Share folder already exists"
	else
		sudo mkdir /home/Share
		sudo chown root:users /home/Share
		sudo chmod ugo+rwX /home/Share
		sudo chmod g+s /home/Share
	fi

	sudo rm -f /home/Share/mint
	sudo cp $HOME/Mint/bin/mint /home/Share/

	echo
	echo "Configure public (RO) folder for all users"
	if [ -d /home/Public ]
	then
		echo "Public folder already exists"
	else
		sudo mkdir /home/Public
		sudo chown $USER:users /home/Public
		sudo chmod ugo+rX /home/Public
		sudo chmod u+w /home/Public
		sudo chmod ug+s /home/Public
	fi


	#===================================================================================================================
	echo
	echo "Increase limit for file system watches (inotify)"
	if [ ! -e /etc/sysctl.d/90-inotify.conf ]
	then
		sudo cp $HOME/Mint/Sytem/etc/sysctl.d/90-inotify.conf /etc/sysctl.d/
		sudo chown root:root /etc/sysctl.d/90-inotify.conf
		sudo sysctl -p --system
	fi

fi # if $USER != guest


#=======================================================================================================================
install_python

#=======================================================================================================================
echo ; echo "Set up local configurations"
if [ -d "Mint" ]
then
	cd Mint
	git fetch --all
	git pull
	cd ..
else
	git clone https://github.com/boderu/Mint.git
fi

if [ -d ".oh-my-zsh" ]
then
	cd .oh-my-zsh
	git fetch --all
	git pull
	cd ..
else
	git clone https://github.com/ohmyzsh/ohmyzsh.git .oh-my-zsh
fi


#=======================================================================================================================
echo ; echo "Check out or update frameworks"

if [ -d "$HOME/Frameworks/KiCAD" ]
then
	pushd "$HOME/Frameworks/KiCAD"
	git fetch --all
	git pull
	popd
else
	pushd "$HOME/Frameworks"
	git clone https://github.com/boderu/Framework.KiCAD.git KiCAD
	popd
fi


#=======================================================================================================================
echo ; echo "FireFox Download Helper App"
curl -sSLf https://github.com/aclap-dev/vdhcoapp/releases/latest/download/install.sh | bash


#=======================================================================================================================
Link "$HOME/Mint/.bashrc"									"$HOME/.bashrc"
Link "$HOME/Mint/.bash_logout"								"$HOME/.bash_logout"
Link "$HOME/Mint/.bash_aliases"								"$HOME/.bash_aliases"
Link "$HOME/Mint/.profile"									"$HOME/.profile"
Link "$HOME/Mint/.zshrc"									"$HOME/.zshrc"
Link "$HOME/Mint/.selected_editor"							"$HOME/.selected_editor"
Link "$HOME/Mint/bin"										"$HOME/bin"
Link "$HOME/Mint/.ne"										"$HOME/.ne"
Link "$HOME/Mint/.config/nemo/actions-tree.json"			"$HOME/.config/nemo/actions-tree.json"
Link "$HOME/Mint/.config/broot"								"$HOME/.config/broot"
Link "$HOME/Mint/.config/btop"								"$HOME/.config/btop"
Link "$HOME/Mint/.config/darktable"							"$HOME/.config/darktable"
Link "$HOME/Mint/.config/git-graph"							"$HOME/.config/git-graph"
Link "$HOME/Mint/.config/htop"								"$HOME/.config/htop"
Link "$HOME/Mint/.config/kicad"								"$HOME/.config/kicad"
Link "$HOME/Mint/.config/lazygit"							"$HOME/.config/lazygit"
Link "$HOME/Mint/.config/micro"								"$HOME/.config/micro"
Link "$HOME/Mint/.config/vlc"								"$HOME/.config/vlc"
Link "$HOME/Mint/.local/share/broot"						"$HOME/.local/share/broot"
Link "$HOME/Mint/.vuescan"									"$HOME/.vuescan"
Link "$HOME/Mint/Templates"									"$HOME/Vorlagen"

Link "$HOME/SynologyDrive/Mint/.vuescanrc"					"$HOME/.vuescanrc"
Link "$HOME/SynologyDrive/Mint/.ssh"						"$HOME/.ssh"
Link "$HOME/SynologyDrive/Mint/.gitconfig"					"$HOME/.gitconfig"
Link "$HOME/SynologyDrive/Mint/.git-credentials"			"$HOME/.git-credentials"
Link "$HOME/SynologyDrive/Mint/.local/share/kicad"			"$HOME/.local/share/kicad"
Link "$HOME/SynologyDrive/Mint/.local/share/rhythmbox"		"$HOME/.local/share/rhythmbox"
Link "$HOME/SynologyDrive/Mint/.local/share/strawberry"		"$HOME/.local/share/strawberry"
Link "$HOME/SynologyDrive/Mint/.local/share/gnome-mines"	"$HOME/.local/share/gnome-mines"
Link "$HOME/SynologyDrive/Mint/.local/share/widelands"		"$HOME/.local/share/widelands"
Link "$HOME/SynologyDrive/Mint/.local/share/widelands"		"$HOME/.var/app/org.widelands.Widelands/.widelands"

Link 	"$HOME/SynologyDrive/Mint/.local/bin/avr8-gnu-toolchain-linux_x86_64"	\
		"$HOME/.local/bin/avr8-gnu-toolchain-linux_x86_64"
#Link "$HOME/SynologyDrive/Mint/.config/darktable"			"$HOME/.config/darktable"

Link "$HOME/SynologyDrive/Bilder"							"$HOME/Bilder"
Link "$HOME/SynologyDrive/Dokumente"						"$HOME/Dokumente"
Link "$HOME/SynologyDrive/Dokumente"						"$HOME/Documents"
Link "$HOME/SynologyDrive/Downloads"						"$HOME/Downloads"
Link "$HOME/SynologyDrive/Calibre-Bibliothek"				"$HOME/Calibre-Bibliothek"
Link "$HOME/SynologyDrive/Musik"							"$HOME/Musik"


#=======================================================================================================================
echo ; echo "Install additional Mint applets"
pushd "$HOME/.local/share/cinnamon/applets/"

if [ -e "$HOME/Mint/mint-actions-download.conf" ]
then
	cat "$HOME/Mint/mint-actions-download.conf" | grep -v '^#' | grep -v '^$' | \
	while read LINE
	do
		if [ ! -d "$LINE" ]
		then
			echo "$LINE"
			wget https://cinnamon-spices.linuxmint.com/files/applets/${LINE}.zip && \
			unzip ${LINE}.zip
			rm -f ${LINE}.zip
		else
			echo "$LINE already exists"
		fi
	done
fi

popd


#=======================================================================================================================
echo ; echo "Install additional Nemo actions"
# Test, ob das Verzeichnis noch ein Link ist
if [ -L "$HOME/.local/share/nemo" ]
then
	echo "$HOME/.local/share/nemo is still a link --> remove"
	rm -Rv "$HOME/.local/share/nemo"
	mkdir -p "$HOME/.local/share/nemo/actions"
	mkdir -p "$HOME/.local/share/nemo/scripts"
	mkdir -p "$HOME/.local/share/nemo/search-helpers"
fi

pushd "$HOME/.local/share/nemo/actions/"

if [ -e "$HOME/Mint/nemo-actions-download.conf" ]
then
	cat "$HOME/Mint/nemo-actions-download.conf" | grep -v '^#' | grep -v '^$' | \
	while read LINE
	do
		echo "$LINE"
		wget https://cinnamon-spices.linuxmint.com/files/actions/${LINE}.zip && \
		unzip -o ${LINE}.zip
		rm -f ${LINE}.zip
	done
fi

# eigene Nemo Actions verlinken - vorher defekte Links löschen
find -L "$HOME/.local/share/nemo/actions/" -type l -exec rm -f {} \;

ls "$HOME/Mint/NemoActions" |
while read FILE
do
	echo $FILE
	# sollte bereits ein Link oder eine Datei existieren -> löschen
	if [ -e "$HOME/.local/share/nemo/actions/${FILE}" ]
	then
		rm -fv "$HOME/.local/share/nemo/actions/${FILE}"
	fi

	# Link (neu) erstellen
	echo "Link $FILE"
	ln -s "$HOME/Mint/NemoActions/${FILE}" "$HOME/.local/share/nemo/actions/${FILE}"
	echo
done

popd


#=======================================================================================================================
# Apps und Desktop konfigurieren
# gibt es eine abweichende Font-Skalierung?
if [ -f $HOME/.text-scaling-factor ]
then
	echo "eine abweichende Font-Skalierung von $(cat $HOME/.text-scaling-factor) einrichten"
	cat $HOME/Mint/org.cinnamon.dconf | \
		sed "s/text-scaling-factor=.*/text-scaling-factor=$(cat $HOME/.text-scaling-factor)/" | \
		dconf load /org/cinnamon/
else
	dconf load /org/cinnamon/ < $HOME/Mint/org.cinnamon.dconf
fi

dconf load /org/nemo/						< $HOME/Mint/org.nemo.dconf
dconf load /org/x/editor/					< $HOME/Mint/org.x.editor.dconf
dconf load /org/x/pix/						< $HOME/Mint/org.x.pix.dconf
dconf load /org/x/reader/					< $HOME/Mint/org.x.reader.dconf
dconf load /org/gnome/calculator/			< $HOME/Mint/org.gnome.calculator.dconf
dconf load /org/gnome/terminal/				< $HOME/Mint/org.gnome.terminal.dconf
dconf load /org/gnome/desktop/interface/	< $HOME/Mint/org.gnome.desktop.interface.dconf

echo
echo "Install broot"
curl -o broot -L https://dystroy.org/broot/download/x86_64-linux/broot
sudo mv -f broot /usr/local/bin
sudo chmod +x /usr/local/bin/broot


echo
echo "Copy Mozilla settings"
if [ ! -d "$HOME/.mozilla" ]
then
	if [ -d "$HOME/SynologyDrive/Mint/.mozilla" ]
	then
		cp -frv "$HOME/SynologyDrive/Mint/.mozilla" "$HOME/"
	fi
fi

echo
echo "zusätzliche Firefox Einstellungen:"
echo "1) Erzeuge alle Firefox-Profile (about:profiles)"
echo "2) Synchronisiere alle Profile (verschiedene Logins notwendig)"
echo "3) Nach der Synchronisierung: don't allow Firefox to send data"
echo "4) Ändere die Toolbar, ..."
echo "5) Ändere die internen Firefox-Einstellungen (about:config)"
echo "   browser.uidensity --> 1"
echo "   signon.includeOtherSubdomainsInLookup --> false"
#read -p "drücke Enter ..."

echo
echo "Einrichtung beendet."
echo

# EOF
