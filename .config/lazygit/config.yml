gui:
    # stuff relating to the UI
    authorColors:
        'Jörg Biedermann': 'cyan'
        'BiedJo': 'cyan'
        'Rüdiger Bode': '#BFFF00'
        'Orlando Capasso': '#FF8000'
        'CapaOr': '#FF8000'
        '*': 'red'
    branchColors: {}
    scrollHeight: 4 # how many lines you scroll by
    scrollPastBottom: true # enable scrolling past the bottom
    mouseEvents: true
    skipDiscardChangeWarning: false
    skipStashWarning: false
    sidePanelWidth: 0.3333 # number from 0 to 1
    expandFocusedSidePanel: false
    mainPanelSplitMode: 'flexible' # one of 'horizontal' | 'flexible' | 'vertical'
    language: 'auto' # one of 'auto' | 'en' | 'zh' | 'pl' | 'nl' | 'ja' | 'ko'
    timeFormat: '02 Jan 06' # https://pkg.go.dev/time#Time.Format
    shortTimeFormat: '15:04 MST'
    theme:
        activeBorderColor:
            - green
            - bold
        inactiveBorderColor:
            - white
        searchingActiveBorderColor:
            - cyan
            - bold
        optionsTextColor:
            - blue
        selectedLineBgColor:
            - blue # set to `default` to have no background colour
        selectedRangeBgColor:
            - blue
        cherryPickedCommitBgColor:
            - cyan
        cherryPickedCommitFgColor:
            - blue
        unstagedChangesColor:
            - red
        defaultFgColor:
            - default
    commitLength:
        show: true
    skipNoStagedFilesWarning: false
    showListFooter: true # for seeing the '5 of 20' message in list panels
    showFileTree: true # for rendering changes files in a tree format
    showRandomTip: true
    showCommandLog: true
    showBranchCommitHash: true # show commit hashes alongside branch names
    experimentalShowBranchHeads: false # visualize branch heads with (*) in commits list
    showBottomLine: true # for hiding the bottom information line (unless it has important information to tell you)
    showIcons: false # deprecated: use nerdFontsVersion instead
    nerdFontsVersion: "" # nerd fonts version to use ("2" or "3"); empty means don't show nerd font icons
    commandLogSize: 8
    splitDiff: 'auto' # one of 'auto' | 'always'
    skipRewordInEditorWarning: false # for skipping the confirmation before launching the reword editor
    windowSize: 'normal' # one of 'normal' | 'half' | 'full' default is 'normal'
    border: 'single' # one of 'single' | 'double' | 'rounded' | 'hidden'
git:
    paging:
        colorArg: always
        pager: diff-so-fancy
        useConfig: false
    commit:
        signOff: false
        verbose: default # one of 'default' | 'always' | 'never'
    merging:
        # only applicable to unix users
        manualCommit: false
        # extra args passed to `git merge`, e.g. --no-ff
        args: '--no-ff'
    skipHookPrefix: WIP
    # The main branches. We colour commits green if they belong to one of these branches,
    # so that you can easily see which commits are unique to your branch (coloured in yellow)
    mainBranches: [master, main]
    autoFetch: true
    autoRefresh: true
    fetchAll: true # Pass --all flag when running git fetch. Set to false to fetch only origin (or the current branch's upstream remote if there is one)
    branchLogCmd: 'git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --'
    allBranchesLogCmd: 'git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium'
    overrideGpg: false # prevents lazygit from spawning a separate process when using GPG
    disableForcePushing: false
    commitPrefixes: {}
    parseEmoji: false
    log:
        # one of date-order, author-date-order, topo-order or default.
        # topo-order makes it easier to read the git log graph, but commits may not
        # appear chronologically. See https://git-scm.com/docs/git-log#_commit_ordering
        order: 'date-order'
        # one of always, never, when-maximised
        # this determines whether the git graph is rendered in the commits panel
        showGraph: 'when-maximised'
        # displays the whole git graph by default in the commits panel (equivalent to passing the `--all` argument to `git log`)
        showWholeGraph: false
    diffContextSize: 3 # how many lines of context are shown around a change in diffs
os:
    editPreset: ''
    edit: 'micro {{filename}}'
    editAtLine: 'micro {{filename}}:{{line}}:1'
    editAtLineAndWait: ''
    open: 'xdg-open {{filename}} >/dev/null'
    openLink: ''
    #editCommand: 'micro' # see 'Configuring File Editing' section
    #editCommandTemplate: ''
    #openCommand: 'xdg-open {{filename}} >/dev/null'
    #openLinkCommand: xdg-open {{link}} >/dev/null
refresher:
    refreshInterval: 10 # File/submodule refresh interval in seconds. Auto-refresh can be disabled via option 'git.autoRefresh'.
    fetchInterval: 60 # Re-fetch interval in seconds. Auto-fetch can be disabled via option 'git.autoFetch'.
update:
    method: prompt # can be: prompt | background | never
    days: 14 # how often an update is checked for
confirmOnQuit: false
# determines whether hitting 'esc' will quit the application when there is nothing to cancel/close
quitOnTopLevelReturn: false
disableStartupPopups: false
notARepository: 'skip' # one of: 'prompt' | 'create' | 'skip' | 'quit'
promptToReturnFromSubprocess: true # display confirmation when subprocess terminates
keybinding:
    universal:
        quit: 'q'
        quit-alt1: '<c-c>' # alternative/alias of quit
        return: '<esc>' # return to previous menu, will quit if there's nowhere to return
        # When set to a printable character, this will work for returning from non-prompt panels
        return-alt1: null
        quitWithoutChangingDirectory: 'Q'
        togglePanel: '<tab>' # goto the next panel
        prevItem: '<up>' # go one line up
        nextItem: '<down>' # go one line down
        prevItem-alt: 'k' # go one line up
        nextItem-alt: 'j' # go one line down
        prevPage: ',' # go to next page in list
        nextPage: '.' # go to previous page in list
        gotoTop: '<' # go to top of list
        gotoBottom: '>' # go to bottom of list
        scrollLeft: 'H' # scroll left within list view
        scrollRight: 'L' # scroll right within list view
        prevBlock: null # goto the previous block / panel
        nextBlock: null # goto the next block / panel
        prevBlock-alt: 'h' # goto the previous block / panel
        nextBlock-alt: 'l' # goto the next block / panel
        jumpToBlock: ['1', '2', '3', '4', '5'] # goto the Nth block / panel
        nextMatch: 'n'
        prevMatch: 'N'
        optionMenu: '?' # show help menu
        optionMenu-alt1: null # show help menu
        select: '<space>'
        goInto: '<enter>'
        openRecentRepos: '<c-r>'
        confirm: '<enter>'
        confirm-alt1: 'y'
        remove: 'd'
        new: 'n'
        edit: 'e'
        openFile: 'o'
        scrollUpMain: '<pgup>' # main panel scroll up
        scrollDownMain: '<pgdown>' # main panel scroll down
        scrollUpMain-alt1: 'K' # main panel scroll up
        scrollDownMain-alt1: 'J' # main panel scroll down
        scrollUpMain-alt2: '<c-u>' # main panel scroll up
        scrollDownMain-alt2: '<c-d>' # main panel scroll down
        executeCustomCommand: ':'
        createRebaseOptionsMenu: 'm'
        pushFiles: 'P'
        pullFiles: 'p'
        refresh: 'R'
        createPatchOptionsMenu: '<c-p>'
        nextTab: '<right>'
        prevTab: '<left>'
        nextScreenMode: '+'
        prevScreenMode: '_'
        undo: 'z'
        redo: '<c-z>'
        filteringMenu: '<c-s>'
        diffingMenu: 'W'
        diffingMenu-alt: '<c-e>' # deprecated
        copyToClipboard: '<c-o>'
        submitEditorText: '<enter>'
        appendNewline: '<a-enter>'
        extrasMenu: '@'
        toggleWhitespaceInDiffView: '<c-w>'
        increaseContextInDiffView: '}'
        decreaseContextInDiffView: '{'
    status:
        checkForUpdate: 'u'
        recentRepos: '<enter>'
    files:
        commitChanges: 'c'
        commitChangesWithoutHook: 'w' # commit changes without pre-commit hook
        amendLastCommit: 'A'
        commitChangesWithEditor: 'C'
        ignoreFile: 'i'
        refreshFiles: 'r'
        stashAllChanges: 's'
        viewStashOptions: 'S'
        toggleStagedAll: 'a' # stage/unstage all
        viewResetOptions: 'D'
        fetch: 'f'
        toggleTreeView: '`'
        openMergeTool: 'M'
        openStatusFilter: '<c-b>'
    branches:
        createPullRequest: 'o'
        viewPullRequestOptions: 'O'
        checkoutBranchByName: 'c'
        forceCheckoutBranch: 'F'
        rebaseBranch: 'r'
        renameBranch: 'R'
        mergeIntoCurrentBranch: 'M'
        viewGitFlowOptions: 'i'
        fastForward: 'f' # fast-forward this branch from its upstream
        createTag: 'T'
        pushTag: 'P'
        setUpstream: 'u' # set as upstream of checked-out branch
        fetchRemote: 'f'
    commits:
        squashDown: 's'
        renameCommit: 'r'
        renameCommitWithEditor: 'R'
        viewResetOptions: 'g'
        markCommitAsFixup: 'f'
        createFixupCommit: 'F' # create fixup commit for this commit
        squashAboveCommits: 'S'
        moveDownCommit: '<c-j>' # move commit down one
        moveUpCommit: '<c-k>' # move commit up one
        amendToCommit: 'A'
        pickCommit: 'p' # pick commit (when mid-rebase)
        revertCommit: 't'
        cherryPickCopy: 'c'
        cherryPickCopyRange: 'C'
        pasteCommits: 'v'
        tagCommit: 'T'
        checkoutCommit: '<space>'
        resetCherryPick: '<c-R>'
        copyCommitMessageToClipboard: '<c-y>'
        openLogMenu: '<c-l>'
        viewBisectOptions: 'b'
    stash:
        popStash: 'g'
        renameStash: 'r'
    commitFiles:
        checkoutCommitFile: 'c'
    main:
        toggleDragSelect: 'v'
        toggleDragSelect-alt: 'V'
        toggleSelectHunk: 'a'
        pickBothHunks: 'b'
    submodules:
        init: 'i'
        update: 'u'
        bulkMenu: 'b'
customCommands:
    - key: 'U'
      command: 'git submodule foreach --recursive git submodule update ; echo done'
      context: 'status'
      description: "Update and init all submodules recursively"
      stream: yes
    - key: 'F'
      command: 'git-fetchall ; echo done'
      context: 'status'
      description: "Fetch all branches from all remotes"
      stream: yes
    - key: 'C'
      command: "lazygit -ucf $HOME/.config/lazygit/config.yml,$HOME/.config/lazygit/component_theme.yml -ucd $HOME/.config/lazygit/sublg -p {{index .PromptResponses 1}}"
      context: 'status'
      description: 'Switching to component'
      loadingText: 'switching to component'
      subprocess: true
      prompts:
        - type: 'menu'
          title: 'Switching to component'
          options:
            - name: 'Show changed components'
              value: 'git-componentschanged'
            - name: 'Show all components'
              value: 'git-componentsall'
        - type: 'menuFromCommand'
          title: 'Component:'
          command: '{{index .PromptResponses 0}}'
          filter: '(?P<component_path>[^ ]*)(?P<branch>.*)'
          valueFormat: '{{ .component_path }}'
          labelFormat: '{{ .component_path }} {{ .branch | blue }}'
    - key: 'A'
      command: 'git-componentsBranchCurrentSetTo.py -r {{.SelectedWorktree.Path | quote}}; echo done'
      context: 'status'
      description: "Set all components in components.conf to the active branches"
      stream: yes
    - key: 'T'
      command: 'git-tagger.py -r {{.SelectedWorktree.Path | quote}} -tn {{.Form.TagName | quote}} -tm {{.Form.TagMessage | quote}}'
      context: 'status'
      description: "Create a tag with fixed components versions"
      stream: yes
      prompts:
        - type: 'input'
          title: 'Name of tag:'
          key: 'TagName'
        - type: 'input'
          title: 'Message for tag:'
          key: 'TagMessage'
    - key: '<c-P>'
      description: "Push to a specific remote repository"
      context: 'global'
      loadingText: 'Pushing ...'
      prompts:
        - type: 'menuFromCommand'
          title: 'Which remote repository to push to?'
          command: bash -c "git remote --verbose | grep '/.* (push)'"
          filter: '(?P<remote>.*)\s+(?P<url>.*) \(push\)'
          valueFormat: '{{ .remote }}'
          labelFormat: '{{ .remote | bold | cyan }} {{ .url }}'
        - type: 'menu'
          title: 'How to push?'
          options:
            - value: 'push'
            - value: 'push --force-with-lease'
            - value: 'push --force'
